name: 'Terraform CI'

on:
  push:
    branches:
    - master
    - main
    - feature
  pull_request:
    branches:
    - master
    - main

# Use the concurrency-block to avoid having parallel runs of the same workflow 
# Further reading: https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#concurrency
concurrency:
  group: template-group

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env: 
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      continue-on-error: true

    #output multine strings: https://trstringer.com/github-actions-multiline-strings/
    - name: Terraform Plan - clean
      id: cleanplan
      if: github.event_name == 'pull_request'
      run: |
        TFPLAN=$(echo "${{ steps.plan.outputs.stdout }}" | awk '/Terraform will perform the following actions|No changes. Infrastructure is up-to-date|No changes. Your infrastructure matches the configuration./,0')
        echo "$TFPLAN"
        TFPLAN="${TFPLAN//'%'/'%25'}"  
        TFPLAN="${TFPLAN//$'\n'/'%0A'}"
        TFPLAN="${TFPLAN//$'\r'/'%0D'}"
        echo "::set-output name=tf::$TFPLAN"      
    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      continue-on-error: true
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`\n
          ${{ steps.cleanplan.outputs.tf }}
          \`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
          
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1


      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push' || github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve